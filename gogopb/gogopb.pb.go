// Code generated by protoc-gen-gogo.
// source: serialization-bench/gogopb/gogopb.proto
// DO NOT EDIT!

package gogopb

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

import io "io"
import code_google_com_p_gogoprotobuf_proto "code.google.com/p/gogoprotobuf/proto"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import fmt1 "fmt"
import strings1 "strings"
import code_google_com_p_gogoprotobuf_proto1 "code.google.com/p/gogoprotobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect1 "reflect"

import code_google_com_p_gogoprotobuf_proto2 "code.google.com/p/gogoprotobuf/proto"

import fmt2 "fmt"
import bytes "bytes"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type PreAccept struct {
	//
	// LeaderId int32
	// Replica  int32
	// Instance int32
	// Ballot   int32
	// Command  []byte
	// Seq      int32
	// Deps     [5]int32
	LeaderId         int32  `protobuf:"varint,1,req" json:"LeaderId"`
	Replica          int32  `protobuf:"varint,2,opt" json:"Replica"`
	Instance         int32  `protobuf:"varint,3,opt" json:"Instance"`
	Ballot           int32  `protobuf:"varint,4,opt" json:"Ballot"`
	Command          []byte `protobuf:"bytes,5,opt" json:"Command"`
	Seq              int32  `protobuf:"varint,6,opt" json:"Seq"`
	Deps1            int64  `protobuf:"varint,7,opt" json:"Deps1"`
	Deps2            int64  `protobuf:"varint,8,opt" json:"Deps2"`
	Deps3            int32  `protobuf:"varint,9,opt" json:"Deps3"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PreAccept) Reset()      { *m = PreAccept{} }
func (*PreAccept) ProtoMessage() {}

func init() {
}
func (m *PreAccept) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.LeaderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Replica |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Instance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Ballot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return proto.ErrWrongType
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, data[index:postIndex]...)
			index = postIndex
		case 6:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Deps1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Deps2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return proto.ErrWrongType
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Deps3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *PreAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreAccept{`,
		`LeaderId:` + fmt.Sprintf("%v", this.LeaderId) + `,`,
		`Replica:` + fmt.Sprintf("%v", this.Replica) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`Ballot:` + fmt.Sprintf("%v", this.Ballot) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Deps1:` + fmt.Sprintf("%v", this.Deps1) + `,`,
		`Deps2:` + fmt.Sprintf("%v", this.Deps2) + `,`,
		`Deps3:` + fmt.Sprintf("%v", this.Deps3) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGogopb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PreAccept) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGogopb(uint64(m.LeaderId))
	n += 1 + sovGogopb(uint64(m.Replica))
	n += 1 + sovGogopb(uint64(m.Instance))
	n += 1 + sovGogopb(uint64(m.Ballot))
	l = len(m.Command)
	n += 1 + l + sovGogopb(uint64(l))
	n += 1 + sovGogopb(uint64(m.Seq))
	n += 1 + sovGogopb(uint64(m.Deps1))
	n += 1 + sovGogopb(uint64(m.Deps2))
	n += 1 + sovGogopb(uint64(m.Deps3))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGogopb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGogopb(x uint64) (n int) {
	return sovGogopb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
	return sovGogopb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedPreAccept(r randyGogopb, easy bool) *PreAccept {
	this := &PreAccept{}
	this.LeaderId = r.Int31()
	this.Replica = r.Int31()
	this.Instance = r.Int31()
	this.Ballot = r.Int31()
	v1 := r.Intn(100)
	this.Command = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Command[i] = byte(r.Intn(256))
	}
	this.Seq = r.Int31()
	this.Deps1 = r.Int63()
	this.Deps2 = r.Int63()
	this.Deps3 = r.Int31()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGogopb(r, 10)
	}
	return this
}

type randyGogopb interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGogopb(r randyGogopb) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringGogopb(r randyGogopb) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneGogopb(r)
	}
	return string(tmps)
}
func randUnrecognizedGogopb(r randyGogopb, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldGogopb(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldGogopb(data []byte, r randyGogopb, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateGogopb(data, uint64(key))
		data = encodeVarintPopulateGogopb(data, uint64(r.Int63()))
	case 1:
		data = encodeVarintPopulateGogopb(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateGogopb(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateGogopb(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateGogopb(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateGogopb(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *PreAccept) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PreAccept) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintGogopb(data, i, uint64(m.LeaderId))
	data[i] = 0x10
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Replica))
	data[i] = 0x18
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Instance))
	data[i] = 0x20
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Ballot))
	data[i] = 0x2a
	i++
	i = encodeVarintGogopb(data, i, uint64(len(m.Command)))
	i += copy(data[i:], m.Command)
	data[i] = 0x30
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Seq))
	data[i] = 0x38
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Deps1))
	data[i] = 0x40
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Deps2))
	data[i] = 0x48
	i++
	i = encodeVarintGogopb(data, i, uint64(m.Deps3))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64Gogopb(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gogopb(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGogopb(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *PreAccept) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&gogopb.PreAccept{` + `LeaderId:` + fmt1.Sprintf("%#v", this.LeaderId), `Replica:` + fmt1.Sprintf("%#v", this.Replica), `Instance:` + fmt1.Sprintf("%#v", this.Instance), `Ballot:` + fmt1.Sprintf("%#v", this.Ballot), `Command:` + fmt1.Sprintf("%#v", this.Command), `Seq:` + fmt1.Sprintf("%#v", this.Seq), `Deps1:` + fmt1.Sprintf("%#v", this.Deps1), `Deps2:` + fmt1.Sprintf("%#v", this.Deps2), `Deps3:` + fmt1.Sprintf("%#v", this.Deps3), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringGogopb(v interface{}, typ string) string {
	rv := reflect1.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect1.Indirect(rv).Interface()
	return fmt1.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringGogopb(e map[int32]code_google_com_p_gogoprotobuf_proto1.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings1.Join(ss, ",") + "}"
	return s
}

type PreAcceptFace interface {
	Proto() code_google_com_p_gogoprotobuf_proto2.Message
	GetLeaderId() int32
	GetReplica() int32
	GetInstance() int32
	GetBallot() int32
	GetCommand() []byte
	GetSeq() int32
	GetDeps1() int64
	GetDeps2() int64
	GetDeps3() int32
}

func (this *PreAccept) Proto() code_google_com_p_gogoprotobuf_proto2.Message {
	return this
}

func (this *PreAccept) TestProto() code_google_com_p_gogoprotobuf_proto2.Message {
	return NewPreAcceptFromFace(this)
}

func (this *PreAccept) GetLeaderId() int32 {
	return this.LeaderId
}

func (this *PreAccept) GetReplica() int32 {
	return this.Replica
}

func (this *PreAccept) GetInstance() int32 {
	return this.Instance
}

func (this *PreAccept) GetBallot() int32 {
	return this.Ballot
}

func (this *PreAccept) GetCommand() []byte {
	return this.Command
}

func (this *PreAccept) GetSeq() int32 {
	return this.Seq
}

func (this *PreAccept) GetDeps1() int64 {
	return this.Deps1
}

func (this *PreAccept) GetDeps2() int64 {
	return this.Deps2
}

func (this *PreAccept) GetDeps3() int32 {
	return this.Deps3
}

func NewPreAcceptFromFace(that PreAcceptFace) *PreAccept {
	this := &PreAccept{}
	this.LeaderId = that.GetLeaderId()
	this.Replica = that.GetReplica()
	this.Instance = that.GetInstance()
	this.Ballot = that.GetBallot()
	this.Command = that.GetCommand()
	this.Seq = that.GetSeq()
	this.Deps1 = that.GetDeps1()
	this.Deps2 = that.GetDeps2()
	this.Deps3 = that.GetDeps3()
	return this
}

func (this *PreAccept) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PreAccept)
	if !ok {
		return fmt2.Errorf("that is not of type *PreAccept")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *PreAccept but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *PreAcceptbut is not nil && this == nil")
	}
	if this.LeaderId != that1.LeaderId {
		return fmt2.Errorf("LeaderId this(%v) Not Equal that(%v)", this.LeaderId, that1.LeaderId)
	}
	if this.Replica != that1.Replica {
		return fmt2.Errorf("Replica this(%v) Not Equal that(%v)", this.Replica, that1.Replica)
	}
	if this.Instance != that1.Instance {
		return fmt2.Errorf("Instance this(%v) Not Equal that(%v)", this.Instance, that1.Instance)
	}
	if this.Ballot != that1.Ballot {
		return fmt2.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if !bytes.Equal(this.Command, that1.Command) {
		return fmt2.Errorf("Command this(%v) Not Equal that(%v)", this.Command, that1.Command)
	}
	if this.Seq != that1.Seq {
		return fmt2.Errorf("Seq this(%v) Not Equal that(%v)", this.Seq, that1.Seq)
	}
	if this.Deps1 != that1.Deps1 {
		return fmt2.Errorf("Deps1 this(%v) Not Equal that(%v)", this.Deps1, that1.Deps1)
	}
	if this.Deps2 != that1.Deps2 {
		return fmt2.Errorf("Deps2 this(%v) Not Equal that(%v)", this.Deps2, that1.Deps2)
	}
	if this.Deps3 != that1.Deps3 {
		return fmt2.Errorf("Deps3 this(%v) Not Equal that(%v)", this.Deps3, that1.Deps3)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PreAccept) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PreAccept)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LeaderId != that1.LeaderId {
		return false
	}
	if this.Replica != that1.Replica {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.Ballot != that1.Ballot {
		return false
	}
	if !bytes.Equal(this.Command, that1.Command) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Deps1 != that1.Deps1 {
		return false
	}
	if this.Deps2 != that1.Deps2 {
		return false
	}
	if this.Deps3 != that1.Deps3 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
