package gobin

import (
	"io"
	"sync"
)

func (t *Quack) BinarySize() (nbytes int, sizeKnown bool) {
	return 111, true
}

type QuackCache struct {
	mu    sync.Mutex
	cache []*Quack
}

func NewQuackCache() *QuackCache {
	c := &QuackCache{}
	c.cache = make([]*Quack, 0)
	return c
}

func (p *QuackCache) Get() *Quack {
	var t *Quack
	p.mu.Lock()
	if len(p.cache) > 0 {
		t = p.cache[len(p.cache)-1]
		p.cache = p.cache[0:(len(p.cache) - 1)]
	}
	p.mu.Unlock()
	if t == nil {
		t = &Quack{}
	}
	return t
}
func (p *QuackCache) Put(t *Quack) {
	p.mu.Lock()
	p.cache = append(p.cache, t)
	p.mu.Unlock()
}
func (t *Quack) Marshal(wire io.Writer) {
	var b [111]byte
	var bs []byte
	bs = b[:111]
	tmp64 := t.X
	bs[0] = byte(tmp64)
	bs[1] = byte(tmp64 >> 8)
	bs[2] = byte(tmp64 >> 16)
	bs[3] = byte(tmp64 >> 24)
	bs[4] = byte(tmp64 >> 32)
	bs[5] = byte(tmp64 >> 40)
	bs[6] = byte(tmp64 >> 48)
	bs[7] = byte(tmp64 >> 56)
	bs[8] = byte(t.Y[0])
	bs[9] = byte(t.Y[1])
	bs[10] = byte(t.Y[2])
	bs[11] = byte(t.Z[0])
	bs[12] = byte(t.Z[1])
	bs[13] = byte(t.Z[2])
	bs[14] = byte(t.Z[3])
	bs[15] = byte(t.Z[4])
	bs[16] = byte(t.Z[5])
	bs[17] = byte(t.Z[6])
	bs[18] = byte(t.Z[7])
	bs[19] = byte(t.Z[8])
	bs[20] = byte(t.Z[9])
	bs[21] = byte(t.Z[10])
	bs[22] = byte(t.Z[11])
	bs[23] = byte(t.Z[12])
	bs[24] = byte(t.Z[13])
	bs[25] = byte(t.Z[14])
	bs[26] = byte(t.Z[15])
	bs[27] = byte(t.Z[16])
	bs[28] = byte(t.Z[17])
	bs[29] = byte(t.Z[18])
	bs[30] = byte(t.Z[19])
	bs[31] = byte(t.Z[20])
	bs[32] = byte(t.Z[21])
	bs[33] = byte(t.Z[22])
	bs[34] = byte(t.Z[23])
	bs[35] = byte(t.Z[24])
	bs[36] = byte(t.Z[25])
	bs[37] = byte(t.Z[26])
	bs[38] = byte(t.Z[27])
	bs[39] = byte(t.Z[28])
	bs[40] = byte(t.Z[29])
	bs[41] = byte(t.Z[30])
	bs[42] = byte(t.Z[31])
	bs[43] = byte(t.Z[32])
	bs[44] = byte(t.Z[33])
	bs[45] = byte(t.Z[34])
	bs[46] = byte(t.Z[35])
	bs[47] = byte(t.Z[36])
	bs[48] = byte(t.Z[37])
	bs[49] = byte(t.Z[38])
	bs[50] = byte(t.Z[39])
	bs[51] = byte(t.Z[40])
	bs[52] = byte(t.Z[41])
	bs[53] = byte(t.Z[42])
	bs[54] = byte(t.Z[43])
	bs[55] = byte(t.Z[44])
	bs[56] = byte(t.Z[45])
	bs[57] = byte(t.Z[46])
	bs[58] = byte(t.Z[47])
	bs[59] = byte(t.Z[48])
	bs[60] = byte(t.Z[49])
	bs[61] = byte(t.Z[50])
	bs[62] = byte(t.Z[51])
	bs[63] = byte(t.Z[52])
	bs[64] = byte(t.Z[53])
	bs[65] = byte(t.Z[54])
	bs[66] = byte(t.Z[55])
	bs[67] = byte(t.Z[56])
	bs[68] = byte(t.Z[57])
	bs[69] = byte(t.Z[58])
	bs[70] = byte(t.Z[59])
	bs[71] = byte(t.Z[60])
	bs[72] = byte(t.Z[61])
	bs[73] = byte(t.Z[62])
	bs[74] = byte(t.Z[63])
	bs[75] = byte(t.Z[64])
	bs[76] = byte(t.Z[65])
	bs[77] = byte(t.Z[66])
	bs[78] = byte(t.Z[67])
	bs[79] = byte(t.Z[68])
	bs[80] = byte(t.Z[69])
	bs[81] = byte(t.Z[70])
	bs[82] = byte(t.Z[71])
	bs[83] = byte(t.Z[72])
	bs[84] = byte(t.Z[73])
	bs[85] = byte(t.Z[74])
	bs[86] = byte(t.Z[75])
	bs[87] = byte(t.Z[76])
	bs[88] = byte(t.Z[77])
	bs[89] = byte(t.Z[78])
	bs[90] = byte(t.Z[79])
	bs[91] = byte(t.Z[80])
	bs[92] = byte(t.Z[81])
	bs[93] = byte(t.Z[82])
	bs[94] = byte(t.Z[83])
	bs[95] = byte(t.Z[84])
	bs[96] = byte(t.Z[85])
	bs[97] = byte(t.Z[86])
	bs[98] = byte(t.Z[87])
	bs[99] = byte(t.Z[88])
	bs[100] = byte(t.Z[89])
	bs[101] = byte(t.Z[90])
	bs[102] = byte(t.Z[91])
	bs[103] = byte(t.Z[92])
	bs[104] = byte(t.Z[93])
	bs[105] = byte(t.Z[94])
	bs[106] = byte(t.Z[95])
	bs[107] = byte(t.Z[96])
	bs[108] = byte(t.Z[97])
	bs[109] = byte(t.Z[98])
	bs[110] = byte(t.Z[99])
	wire.Write(bs)
}

func (t *Quack) Unmarshal(wire io.Reader) error {
	var b [111]byte
	var bs []byte
	bs = b[:111]
	if _, err := io.ReadAtLeast(wire, bs, 111); err != nil {
		return err
	}
	t.X = int((uint64(bs[0]) | (uint64(bs[1]) << 8) | (uint64(bs[2]) << 16) | (uint64(bs[3]) << 24) | (uint64(bs[4]) << 32) | (uint64(bs[5]) << 40) | (uint64(bs[6]) << 48) | (uint64(bs[7]) << 56)))
	t.Y[0] = byte(bs[8])
	t.Y[1] = byte(bs[9])
	t.Y[2] = byte(bs[10])
	t.Z[0] = byte(bs[11])
	t.Z[1] = byte(bs[12])
	t.Z[2] = byte(bs[13])
	t.Z[3] = byte(bs[14])
	t.Z[4] = byte(bs[15])
	t.Z[5] = byte(bs[16])
	t.Z[6] = byte(bs[17])
	t.Z[7] = byte(bs[18])
	t.Z[8] = byte(bs[19])
	t.Z[9] = byte(bs[20])
	t.Z[10] = byte(bs[21])
	t.Z[11] = byte(bs[22])
	t.Z[12] = byte(bs[23])
	t.Z[13] = byte(bs[24])
	t.Z[14] = byte(bs[25])
	t.Z[15] = byte(bs[26])
	t.Z[16] = byte(bs[27])
	t.Z[17] = byte(bs[28])
	t.Z[18] = byte(bs[29])
	t.Z[19] = byte(bs[30])
	t.Z[20] = byte(bs[31])
	t.Z[21] = byte(bs[32])
	t.Z[22] = byte(bs[33])
	t.Z[23] = byte(bs[34])
	t.Z[24] = byte(bs[35])
	t.Z[25] = byte(bs[36])
	t.Z[26] = byte(bs[37])
	t.Z[27] = byte(bs[38])
	t.Z[28] = byte(bs[39])
	t.Z[29] = byte(bs[40])
	t.Z[30] = byte(bs[41])
	t.Z[31] = byte(bs[42])
	t.Z[32] = byte(bs[43])
	t.Z[33] = byte(bs[44])
	t.Z[34] = byte(bs[45])
	t.Z[35] = byte(bs[46])
	t.Z[36] = byte(bs[47])
	t.Z[37] = byte(bs[48])
	t.Z[38] = byte(bs[49])
	t.Z[39] = byte(bs[50])
	t.Z[40] = byte(bs[51])
	t.Z[41] = byte(bs[52])
	t.Z[42] = byte(bs[53])
	t.Z[43] = byte(bs[54])
	t.Z[44] = byte(bs[55])
	t.Z[45] = byte(bs[56])
	t.Z[46] = byte(bs[57])
	t.Z[47] = byte(bs[58])
	t.Z[48] = byte(bs[59])
	t.Z[49] = byte(bs[60])
	t.Z[50] = byte(bs[61])
	t.Z[51] = byte(bs[62])
	t.Z[52] = byte(bs[63])
	t.Z[53] = byte(bs[64])
	t.Z[54] = byte(bs[65])
	t.Z[55] = byte(bs[66])
	t.Z[56] = byte(bs[67])
	t.Z[57] = byte(bs[68])
	t.Z[58] = byte(bs[69])
	t.Z[59] = byte(bs[70])
	t.Z[60] = byte(bs[71])
	t.Z[61] = byte(bs[72])
	t.Z[62] = byte(bs[73])
	t.Z[63] = byte(bs[74])
	t.Z[64] = byte(bs[75])
	t.Z[65] = byte(bs[76])
	t.Z[66] = byte(bs[77])
	t.Z[67] = byte(bs[78])
	t.Z[68] = byte(bs[79])
	t.Z[69] = byte(bs[80])
	t.Z[70] = byte(bs[81])
	t.Z[71] = byte(bs[82])
	t.Z[72] = byte(bs[83])
	t.Z[73] = byte(bs[84])
	t.Z[74] = byte(bs[85])
	t.Z[75] = byte(bs[86])
	t.Z[76] = byte(bs[87])
	t.Z[77] = byte(bs[88])
	t.Z[78] = byte(bs[89])
	t.Z[79] = byte(bs[90])
	t.Z[80] = byte(bs[91])
	t.Z[81] = byte(bs[92])
	t.Z[82] = byte(bs[93])
	t.Z[83] = byte(bs[94])
	t.Z[84] = byte(bs[95])
	t.Z[85] = byte(bs[96])
	t.Z[86] = byte(bs[97])
	t.Z[87] = byte(bs[98])
	t.Z[88] = byte(bs[99])
	t.Z[89] = byte(bs[100])
	t.Z[90] = byte(bs[101])
	t.Z[91] = byte(bs[102])
	t.Z[92] = byte(bs[103])
	t.Z[93] = byte(bs[104])
	t.Z[94] = byte(bs[105])
	t.Z[95] = byte(bs[106])
	t.Z[96] = byte(bs[107])
	t.Z[97] = byte(bs[108])
	t.Z[98] = byte(bs[109])
	t.Z[99] = byte(bs[110])
	return nil
}
